import logging
import threading
import time
import socket
from pwnagotchi import plugins
import pwnagotchi.ui.components as components

class BatteryStatus(plugins.Plugin):
    __author__ = "RyanWires"
    __version__ = "1.2.0"
    __license__ = "GPL3"
    __description__ = "Displays PiSugar battery % and voltage (PiSugar 2/3/3 Plus compatible)."

    def __init__(self):
        self.ui_initialized = False
        self.last_ui_update = 0
        self.update_interval = 10  # default; can be overridden by config
        self.data = {"percent": 0, "voltage": 0.0}
        self.update_thread = threading.Thread(target=self._battery_loop, daemon=True)
        self.update_thread.start()

    def on_config_changed(self, config):
        # Read update interval from config if set
        try:
            self.update_interval = int(config.get("main", {}).get("plugins", {}).get("battery_status", {}).get("update_interval", 10))
        except Exception:
            logging.warning("[battery_status] Invalid update_interval in config, using default 10s")
            self.update_interval = 10

    def on_ui_setup(self, ui):
        if not self.ui_initialized:
            ui.add_element(
                'battery',
                components.Text(
                    position=(10, 60),  # adjust as needed
                    value='Battery: --% / --V',
                    color=255
                )
            )
            self.ui_initialized = True

    def on_ui_update(self, ui):
        now = time.time()
        if now - self.last_ui_update < self.update_interval:
            return
        self.last_ui_update = now
        percent = self.data.get("percent", 0)
        voltage = self.data.get("voltage", 0.0)
        text = f"Battery: {percent:.0f}% / {voltage:.2f}V"
        with ui._lock:
            ui.set("battery", text)

    def _battery_loop(self):
        while True:
            try:
                self.data = self._read_pisugar()
            except Exception as e:
                logging.error(f"[battery_status] Failed to read PiSugar: {e}")
            time.sleep(self.update_interval)

    def _read_pisugar(self):
        data = {"percent": 0, "voltage": 0.0}
        try:
            s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
            s.settimeout(2.0)  # avoid hanging
            s.connect("/tmp/pisugar-server.sock")

            # Battery %
            s.sendall(b"get battery\n")
            resp = s.recv(1024).decode()
            try:
                data["percent"] = float(resp.strip().split(":")[-1])
            except Exception:
                data["percent"] = 0

            # Voltage
            s.sendall(b"get battery_v\n")
            resp = s.recv(1024).decode()
            try:
                data["voltage"] = float(resp.strip().split(":")[-1])
            except Exception:
                data["voltage"] = 0.0

            s.close()
        except Exception as e:
            logging.error(f"[battery_status] PiSugar read error: {e}")
        return data
